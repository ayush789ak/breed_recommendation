# -*- coding: utf-8 -*-
"""recommendation_dog.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hLzxo1vgmR5qS8YN-28MN1aYIb91Q1Mo
"""




import csv
import numpy as np
import pandas as pd
df = pd.read_csv("akc-data-latest.csv.zip")

df

df= df.rename(columns={'Unnamed: 0' : 'breed'})

df=df.dropna()

df['group'].unique().tolist()

for col in [col for col in df.columns if 'value' in col]:
    df[('high_'+col).replace('_value','')] = df[col].apply(lambda x: x >= .8)
    df[('medium_'+col).replace('_value','')] = df[col].apply(lambda x: .4 <= x <= .8)
    df[('low_'+col).replace('_value','')] = df[col].apply(lambda x: x <= .4)
    
    df[col] = df[col].apply(lambda x: [x,0])

df[['shedding_value','shedding_category','high_shedding','medium_shedding','low_shedding']]

for col in ['height','weight','expectancy']:
    df[col] = (df['max_'+col] + df['min_'+col])/2

for col in ['height','weight','expectancy']:
    temp = df[col].describe(percentiles=[.2,.33,.4,.6,.67,.8])
    df['high_'+col] = df[col].apply(lambda x: x > temp['67%'])
    df['medium_'+col] = df[col].apply(lambda x: temp['33%'] < x < temp['67%'])
    df['low_'+col] = df[col].apply(lambda x: x < temp['33%'])
    
    df[col+'_value'] = df[col].apply(lambda x: '1' if x >= temp['80%'] else x)
    df[col+'_value'] = df[col+'_value'].apply(lambda x: '.8' if ((type(x)!=str) and (x >= temp['60%']) and (x < temp['80%'])) else x)
    df[col+'_value'] = df[col+'_value'].apply(lambda x: '.6' if ((type(x)!=str) and (x >= temp['40%']) and (x < temp['60%'])) else x)
    df[col+'_value'] = df[col+'_value'].apply(lambda x: '.4' if ((type(x)!=str) and (x >= temp['20%']) and (x < temp['40%'])) else x)
    df[col+'_value'] = df[col+'_value'].apply(lambda x: '.2' if ((type(x)!=str) and (x < temp['20%'])) else x) 
    df[col+'_value'] = df[col+'_value'].apply(lambda x: [float(x),0])

df[['min_weight','max_weight','weight','high_weight','medium_weight','low_weight','weight_value']]

df['weight'].describe(percentiles=[.33,.67])[['33%','67%']]

output_cols = ['group','temperament'] + [col for col in df.columns if any([substr in col for substr in  ['min_','max_','category']])]

output_cols

def recommend_popular_dogs(group=[],low=[],medium=[],high=[]):
    if type(group) == str:
        group = [group]
    if type(low) == str:
        low = [low]
    if type(medium) == str:
        medium = [medium]
    if type(high) == str:
        high = [high]
    
    temp = df.sort_values('popularity')
    if len(group) > 0:
        temp = temp[temp['group'].isin(group)]
    if len(low) > 0:
        for col in low:
            temp = temp[temp['low_'+col]]
    if len(medium) > 0:
        for col in medium:
            temp = temp[temp['medium_'+col]]
    if len(high) > 0:
        for col in high:
            temp = temp[temp['high_'+col]]
    
    num_dogs = min(10,len(temp))
    
    for i in range(num_dogs):
        print('{}.'.format(i+1),temp['breed'].iloc[i])
    
    for i in range(num_dogs):
        print()
        print('{}.'.format(i+1),temp['breed'].iloc[i])
        print(temp['description'].iloc[i])
        print(temp[output_cols].iloc[i])

    return

df['group'] = df['group'].apply(lambda x: x.replace(' Group',''))

#recommend_popular_dogs()

#recommend_popular_dogs(group='Toy')

#recommend_popular_dogs(group='Toy',low=['height','weight','shedding'],high='expectancy')

df['temperament list'] = df['temperament'].apply(lambda x: x.split(',') if type(x)==str else [])
temperament = []
for i in df['temperament list']:
    temperament.extend(i)
temperament_no_repeats = set(temperament)
df['one-hot temperament'] = df['temperament list'].apply(lambda x: [int(temperament in x) for temperament in temperament_no_repeats])

group_no_repeats = df['group'].unique()
df['one-hot group'] = df['group'].apply(lambda x: [int(group in x) for group in group_no_repeats])

from sklearn.metrics.pairwise import euclidean_distances, cosine_similarity

def recommend_similar_dogs(breed,group=[],low=[],medium=[],high=[],ignore=[],important=[]):
    if type(group) == str:
        group = [group]
    if type(low) == str:
        low = [low]
    if type(medium) == str:
        medium = [medium]
    if type(high) == str:
        high = [high]
    if type(ignore) == str:
        ignore = [ignore]
    
    temp_cols = set(df.columns) - set(ignore)
    temp = df[temp_cols]
    if len(group) > 0:
        temp = temp[(temp['breed']==breed)|(temp['group'].isin(group))]
    if len(low) > 0:
        for col in low:
            temp = temp[(temp['breed']==breed)|(temp['low_'+col])]
    if len(medium) > 0:
        for col in medium:
            temp = temp[(temp['breed']==breed)|(temp['medium_'+col])]
    if len(high) > 0:
        for col in high:
            temp = temp[(temp['breed']==breed)|(temp['high_'+col])]
    temp = temp.reset_index(drop=True)
            
    sims = np.zeros([len(temp),len(temp)])
    for col in [col for col in temp.columns if 'value' in col]:
        if col in important:
            sims += 5*(1-np.array(euclidean_distances(temp[col].tolist(),temp[col].tolist())))
        else:
            sims += (1-np.array(euclidean_distances(temp[col].tolist(),temp[col].tolist())))
            
    for col in ['one-hot temperament','one-hot group']:
        if col in important:
            sims += 5*np.array(cosine_similarity(temp[col].tolist(),temp[col].tolist()))
        else:
            sims += np.array(cosine_similarity(temp[col].tolist(),temp[col].tolist()))
    
    idx = temp[temp['breed']==breed].index
    sims = list(enumerate(sims[idx][0]))
    sims = sorted(sims, key=lambda x: x[1], reverse=True)    
    num_dogs = min(10,len(temp))
    sims = sims[:num_dogs+1]
    breed_indices = [i[0] for i in sims]
    
    n = 0
    for i in breed_indices:
        if n == 0:
            print('Selected:'.format(n),temp['breed'].iloc[i])
        else:
            print('{}.'.format(n),temp['breed'].iloc[i])
        n += 1
    
    n = 0
    for i in breed_indices:
        print()
        if n == 0:
            print('Selected:'.format(n),temp['breed'].iloc[i])
        else:
            print('{}.'.format(n),temp['breed'].iloc[i])
        print(temp['description'].iloc[i])
        print(temp[output_cols].iloc[i])
        n += 1
    return temp['breed'].iloc[i]

#recommend_similar_dogs('Shiba Inu')
